{"version":3,"sources":["Components/DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","handlerClick","bind","handlerKeyDown","document","addEventListener","evt","this","audioKey","key","toUpperCase","audio","getElementById","currentTime","play","callback","description","replace","className","id","onClick","src","audioUrl","React","Component","audios","keyCode","url","App","state","display","name","setState","drumPads","map","x","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAsCeA,G,kBAlCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAEtBE,SAASC,iBAAiB,UAAW,EAAKF,gBAL5B,E,4EASHG,GACPC,KAAKP,MAAMQ,WAAaF,EAAIG,IAAIC,eAChCH,KAAKN,iB,qCAKT,IAAMU,EAAQP,SAASQ,eAAeL,KAAKP,MAAMQ,UACjDG,EAAME,YAAc,EACpBF,EAAMG,OACNP,KAAKP,MAAMe,SAASR,KAAKP,MAAMgB,YAAYC,QAAQ,IAAK,Q,+BAIxD,OACI,yBAAKC,UAAW,YAAcX,KAAKP,MAAMQ,UACrC,4BAAQW,GAAIZ,KAAKP,MAAMgB,YAAaE,UAAU,sBAAsBE,QAASb,KAAKN,cAAeM,KAAKP,MAAMQ,SAC5G,2BAAOU,UAAU,OAAOC,GAAIZ,KAAKP,MAAMQ,SAAUa,IAAKd,KAAKP,MAAMsB,iB,GA5B3DC,IAAMC,YCGtBC,EAAS,CAAC,CACdC,QAAS,GACTP,GAAI,IACJH,YAAa,WACbW,IAAK,4DACJ,CACDD,QAAS,GACTP,GAAI,IACJH,YAAa,WACbW,IAAK,4DACJ,CACDD,QAAS,GACTP,GAAI,IACJH,YAAa,WACbW,IAAK,4DACJ,CACDD,QAAS,GACTP,GAAI,IACJH,YAAa,WACbW,IAAK,8DACJ,CACDD,QAAS,GACTP,GAAI,IACJH,YAAa,OACbW,IAAK,4DACJ,CACDD,QAAS,GACTP,GAAI,IACJH,YAAa,UACbW,IAAK,0DACJ,CACDD,QAAS,GACTP,GAAI,IACJH,YAAa,cACbW,IAAK,8DACJ,CACDD,QAAS,GACTP,GAAI,IACJH,YAAa,OACbW,IAAK,8DACJ,CACDD,QAAS,GACTP,GAAI,IACJH,YAAa,YACbW,IAAK,2DAqDQC,E,YA7Cb,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KAED6B,MAAQ,CACXC,QAAS,IAGX,EAAKf,SAAW,EAAKA,SAASb,KAAd,gBAPC,E,sEAUV6B,GACPxB,KAAKyB,SAAS,CACZF,QAASC,M,+BAIH,IAAD,OAEDE,EAAWR,EAAOS,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAS3B,SAAU2B,EAAEhB,GACtCJ,SAAU,EAAKA,SACfO,SAAUa,EAAER,IACZX,YAAamB,EAAEnB,iBAE/B,OACE,yBAAKE,UAAU,OAEb,yBAAKC,GAAG,gBACN,yBAAKD,UAAU,iBAEb,yBAAKA,UAAU,oBACb,uBAAGC,GAAG,WAAWZ,KAAKsB,MAAMC,UAG9B,yBAAKZ,UAAU,gBACZe,U,GApCGV,IAAMC,WC3CJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASQ,eAAe,SD2H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fb4e0012.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass DrumPad extends React.Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.handlerClick = this.handlerClick.bind(this);\r\n        this.handlerKeyDown = this.handlerKeyDown.bind(this);\r\n\r\n        document.addEventListener('keydown', this.handlerKeyDown);\r\n\r\n    }\r\n\r\n    handlerKeyDown(evt){\r\n        if (this.props.audioKey === evt.key.toUpperCase()){\r\n            this.handlerClick();\r\n        }\r\n    }\r\n\r\n    handlerClick(){\r\n        const audio = document.getElementById(this.props.audioKey);\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        this.props.callback(this.props.description.replace('-', ' '));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'drum-pad-' + this.props.audioKey}>\r\n                <button id={this.props.description} className=\"drum-pad pad-button\" onClick={this.handlerClick}>{this.props.audioKey}\r\n                <audio className=\"clip\" id={this.props.audioKey} src={this.props.audioUrl} />\r\n\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React from 'react';\nimport './App.scss';\nimport DrumPad from './Components/DrumPad'\n\n\nconst audios = [{\n  keyCode: 81,\n  id: 'Q',\n  description: 'Heater-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n  keyCode: 87,\n  id: 'W',\n  description: 'Heater-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n  keyCode: 69,\n  id: 'E',\n  description: 'Heater-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n  keyCode: 65,\n  id: 'A',\n  description: 'Heater-4',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n  keyCode: 83,\n  id: 'S',\n  description: 'Clap',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n  keyCode: 68,\n  id: 'D',\n  description: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n  keyCode: 90,\n  id: 'Z',\n  description: \"Kick-n'-Hat\",\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n  keyCode: 88,\n  id: 'X',\n  description: 'Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n  keyCode: 67,\n  id: 'C',\n  description: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n},\n];\n\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      display: ''\n    };\n\n    this.callback = this.callback.bind(this);\n  }\n\n  callback(name){\n    this.setState({\n      display: name\n    });\n  }\n\n  render() {\n\n    const drumPads = audios.map(x => <DrumPad audioKey={x.id} \n                    callback={this.callback} \n                    audioUrl={x.url}\n                    description={x.description}/> );\n\n    return (\n      <div className=\"App\">\n       \n        <div id='drum-machine'>\n          <div className='flexContainer'>\n\n            <div className='displayContainer'>\n              <p id=\"display\">{this.state.display}</p>\n            </div>\n\n            <div className='padContainer'>\n              {drumPads}\n            </div>\n          </div>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}